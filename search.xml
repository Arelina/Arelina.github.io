<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[字符串查找问题]]></title>
    <url>%2F2019%2F10%2F30%2F%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9F%A5%E6%89%BE%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[给定一个字符串 在里面查找一个字符串 并返回其出现位置和出现的次数例如： 1234var str = "短路是指电路或电路中的JavaScript一部分被短接" + "如负载与电源两端被导线连接在一JavaScript起就称为短路短路时电源提供的电 JavaScript流将比通路时" + "提供的电流大得多一JavaScript般情况下不允许短路JavaScript如果短路";var word = "JavaScript"; 给定一个 字符串 str 要求返会在字符串中word的位置和出现次数 方法一（简单） 思路： 使用字符串的方法lastIndexOf() 方法 进行倒序查询，由于这个方法只能查询单个， 所以在每次查询到相应单词后，需要将字符串截取，截取所查字符串前方的字符， 可以使用 substring()方法或者slice()方法，截取单词位置之前的字符串 然后 通过循环再次 查询截取 直至str.lastIndexOf() =-!的时候 停止循环 其中可以再循环中 每次查询出的时候把位置 存储到数组中即可 最后数组的长度即为单词出现的次数。 具体实现如下： 123456789101112function f(str, word) &#123; //所查字符串出现的位置 var loca = str.lastIndexOf(word); //存放位置的数组 var arr = []; while (loca != -1) &#123; arr.push(loca) str = str.substring(0,loca); loca = str.lastIndexOf(word); &#125; return arr; &#125; 方法二（最简单） 每一次截取字符串的10位，如果和目标值字符串相等 则可以输出，并且次数加一 12345678910function f(str,word) &#123; var nums = 0; for(var i=0;i&lt;str.length;i++)&#123; if (str.substr(i,10) == word) &#123; nums+=1; console.log("str中第"+nums+"个的单词的位置是"+i); &#125; &#125; console.log("字符串的长度是"+"i")&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[Js作用域]]></title>
    <url>%2F2019%2F10%2F30%2FJs%E4%BD%9C%E7%94%A8%E5%9F%9F%2F</url>
    <content type="text"><![CDATA[Js作用域《你不知道的Js》 第一章 读书笔记 Js编译原理 js属于一门 “编译语言”，并非编程语言，他不是提前编译的 传统编译语言流程中，一般会经历三个步骤，统称为 ”编译“ 词法分析 语法分析 代码生成 相比传统编译过程只有三个步骤的语言的编译器，Js引擎会更复杂 Js的引擎 没有大量的时间来进行编译，Js的编译过程 不是发生在构建之前的， 相对于Js来说，大部分的情况 编译发生在代码执行前的几微秒，或者更短 作用域 以 var a =2; 为例，在执行这个语句，会有以下参与 引擎 负责整个js程序的编译及执行的过程 编译器 负责语法分析和代码生成等功能 作用域 负责收集并维护由所有的标识符 （变量）组成的一系列查询，并实施一套严格的规则 确定当前执行的代码对这些标识符的访问权限 编译 var a =2; 的过程 首先，遇到 var a； 编译器 会向作用域查询 是否存在一个该名称的变量存在于同一个作用域的集合中。如果存在的话，编译器会直接忽略这个声明，继续进行编译，如果不存在，则会要求作用域，在当前作用域的集合中 声明一个新的变量，命名为 a。 然后 编译器会为引擎生成运行所需的代码，这些代码就是用来执行 a= 2；这个赋值操作。 引擎运行时，首先询问当前作用域，查找集合中是否存在一个叫做a的变量，如果存在，则会使用这个变量，如果没有，则会继续查找这个这个变量。 如果找到了a，则会把2赋值给a，如果没有则会抛出一个异常 关于编译器 和 引擎 引擎在对变量进行查询一共有两种，一个时LHS,另一个时RHS; 笼统的说，这两个时一个在赋值操作的左侧，一个在赋值操作的右侧 例1. 1console.log(a); 这里就是对a的一个RHS引用，因为这里a并没有赋值，只是去查找了a的值，并传给了console 比如 a = 2；就是LHS查询，这里并不关心当前值是什么，只是为 =2 找到一个目标。 例2. 12345function foo(a) &#123; console.log(a); //2&#125;foo(2); 引擎：我说作用域，我需要为foo进行RHS引用。你见过它吗？ 作用域：别说，我还真见过，编译器那小子刚刚声明了它。它是一个函数，给你。 引擎：哥们太够意思了！好吧，我来执行一下foo。 引擎：作用域，还有个事儿。我需要为a进行LHS引用，这个你见过吗？ 作用域：这个也见过，编译器最近把它声名为foo的一个形式参数了，拿去吧。 引擎：大恩不言谢，你总是这么棒。现在我要把2赋值给a。 引擎：哥们，不好意思又来打扰你。我要为console进行RHS引用，你见过它吗？ 作用域：咱俩谁跟谁啊，再说我就是干这个。这个我也有，console 是个内置对象。 给你。 引擎：么么哒。我得看看这里面是不是有log(..)。太好了，找到了，是一个函数。 引擎：哥们，能帮我再找一下对a的RHS引用吗？虽然我记得它，但想再确认一次。 作用域：放心吧，这个变量没有变动过，拿走，不谢。 引擎：真棒。我来把a的值，也就是2，传递进log(..)。 作用域和嵌套 规则： 当一个快或者函数 嵌套在另外一个块或者函数的时候，就发生了作用域的嵌套。 所以i，在当前作用域中无法找到某个变量的时候，引擎会在外层嵌套的作用域中继续查找，直到找到该变量，或者 抵达最外层的作用域（也就是全局作用域）为止 例3. 123456function foo (a) &#123; console.log(a+b);&#125;var b=2;foo(2); 引擎：foo 的作用域兄弟，你见过 b 吗？我需要对它进行 RHS 引用。 作用域：听都没听过，走开。 引擎：foo 的上级作用域兄弟，咦？有眼不识泰山，原来你是全局作用域大哥， 太好了。你见过 b 吗？我需要对它进行 RHS 引用。 作用域：当然了，给你吧。 异常 对于 例3，第一次对RHS查询时时无法找到该变量的，所以引擎会抛出ReferenceError 异常。 相对于，RHS,Lhs查询，如果在顶层（全局作用域下） 也无法找到目标变量，全局作用域中就会创建一个具有该名称的变量，并返回给引擎，前提时程序运行在非”严格模式“下 自从es5 以后，有了”严格模式“ 如果是在严格模式下，即使是LHS查询，如果没有变量，即使再全局作用域的时候 也不会创建并返回一个全局变量，同时会抛出和RHS类似的ReferenceError 异常 如果RHS找到查询到了变量，但是对这个变量进行了不合理的操作，也会引起一种异常，叫做TypeError。 ReferenceError 同作用域判别失败相关，而 TypeError 则代表作用域判别成功了，但是对 结果的操作是非法或不合理的 总结 作用域是一套规则，用于确定在何处以及如何查找变量（标识符）。如果查找的目的是对 变量进行赋值，那么就会使用 LHS 查询；如果目的是获取变量的值，就会使用 RHS 查询。]]></content>
  </entry>
  <entry>
    <title><![CDATA[用css渐变实现菱形图像]]></title>
    <url>%2F2019%2F10%2F09%2F%E7%94%A8css%E6%B8%90%E5%8F%98%E5%AE%9E%E7%8E%B0%E8%8F%B1%E5%BD%A2%E5%9B%BE%E5%83%8F%2F</url>
    <content type="text"><![CDATA[用css渐变实现菱形图像 要求 单纯用html或 css实现下图效果 方法一 ： 分隔法 ​ 将一个div 沿对宽高的中点，分割成四个小的div，然后再每一个div中设置线性渐变 设置四个不同的角度，即可做出菱形 代码 123456789101112131415161718192021222324div:first-child &#123; background: -webkit-linear-gradient(-45deg,#99d4ff 50%, gray 50%); background: -o-linear-gradient(-45deg,#99d4ff 50%, gray 50%); background: -moz-linear-gradient(-45deg,#99d4ff 50%, gray 50%); background: linear-gradient(-45deg,#99d4ff 50%, gray 50%); &#125;.main div div:nth-child(2) &#123; background: -webkit-linear-gradient(45deg,#99d4ff 50%, gray 50%); background: -o-linear-gradient(45deg,#99d4ff 50%, gray 50%); background: -moz-linear-gradient(45deg,#99d4ff 50%, gray 50%); background: linear-gradient(45deg,#99d4ff 50%, gray 50%); &#125; .main div div:nth-child(4) &#123; background: -webkit-linear-gradient(135deg,#99d4ff 50%, gray 50%); background: -o-linear-gradient(135deg,#99d4ff 50%, gray 50%); background: -moz-linear-gradient(135deg,#99d4ff 50%, gray 50%); background: linear-gradient(135deg,#99d4ff 50%, gray 50%); &#125; .main div div:nth-child(3) &#123; background: -webkit-linear-gradient(-135deg,#99d4ff 50%, gray 50%); background: -o-linear-gradient(-135deg,#99d4ff 50%, gray 50%); background: -moz-linear-gradient(-135deg,#99d4ff 50%, gray 50%); background: linear-gradient(-135deg,#99d4ff 50%, gray 50%); &#125; 方法二 ： 设置伪类覆盖法 ​ 写一个div，然后设置对角的线性渐变，实现左上和右下角的灰色角和中间的青色部分，但是中间的会全部 覆盖。 ​ 所以 在给原来的div设置一个伪类 ：before，和这个div 同样大小 然后在另外两个角度设置线性渐变，然后他就会出现四个灰色的角，但是中间的颜色会全覆盖，如图 然后只要把中间的颜色设置成透明，就可以了。 实现代码如下 1234567891011121314&lt;style&gt; div &#123; width: 500px; height: 500px; background: linear-gradient(135deg,grey 25%,lightskyblue 25%, lightskyblue 75%,grey 75%) repeat; &#125; div:before &#123; width: 500px; height: 500px; display: block; content: ""; background: linear-gradient(45deg,grey 25%,transparent 25%, transparent 75%,grey 75%) repeat; &#125; &lt;/style&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[Spring注解]]></title>
    <url>%2F2019%2F09%2F29%2FSpring%E6%B3%A8%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[Spring注解单纯注解方式 ​ base-package 为注解扫描的路径 1&lt;context:component-scan base-package="com.arelin"/&gt; 1234567@Component("userService")等同于 @Service("userService")，dao等等 再不用的层用不同的名字，好区分 但是意义相同 @Value("米饭")直接注入属性 @Resource(name = "userDao") 注入其他的bean,或者类 其他注解 1234@PostConstruct等同于init 为bean初始化时运行@PreDestroybean销毁时运行 注解和xml方式联合使用 在xml中 1&lt;context:annotation-config/&gt;&lt;bean id="productService" class="com.arelin.demo3.ProductService"/&gt;&lt;bean id="productDao" class="com.arelin.demo3.ProductDao"/&gt;&lt;bean id="cateDao" class="com.arelin.demo3.CateDao"/&gt; 只添加主类的bean,属性和依赖注入交给注解以@Resource的方式]]></content>
  </entry>
  <entry>
    <title><![CDATA[css定位]]></title>
    <url>%2F2019%2F09%2F29%2Fcss%E5%AE%9A%E4%BD%8D%2F</url>
    <content type="text"><![CDATA[CSS定位普通文档流==标准文档流 normal-flow ​ 块级元素和行内元素属性 position ​ 元素定位，层叠相关功能，核心模块 盒子模型的类型和尺寸 布局模型 定位模型 自然/静态/常规定位 static 不会受top,bottom等影响 外边距塌陷 margin 听比较大的 如果左右设置 auto，左右边距会自动扩大占满剩余宽度 绝对定位 absolute 使元素脱离常规流 找 设置定位的祖先元素进行绝对定位，如果没有则找body元素 lrtb如果设置为0 则对齐到最近的定位祖先元素的各边 margin:auto;则会上下左右居中 相对定位 relative 使是元素成为 containing-block 可定位的祖先元素 可以设置 上下左右 z-index ,相对于自身的定位 不会离开常规流 任何元素都可以设置relative 。他的绝对定位后代可以设置相对于设置相对定位元素进行移动 固定定位 fixed 相对于视口定位 不会随元素视口滚动而滚动 继承absolute特点 IE盒子模型 设置的宽高 为内容+padding的 宽高 弹出层设计 主体层 遮罩层 弹出层]]></content>
  </entry>
  <entry>
    <title><![CDATA[CSS世界读书笔记(一)]]></title>
    <url>%2F2019%2F09%2F27%2FCSS%E4%B8%96%E7%95%8C%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E4%B8%80%2F</url>
    <content type="text"><![CDATA[CSS世界读书笔记 （一）]]></content>
  </entry>
  <entry>
    <title><![CDATA[ByeSame]]></title>
    <url>%2F2019%2F09%2F25%2FByeSame%2F</url>
    <content type="text"><![CDATA[ByeSame百杉第一天]]></content>
  </entry>
  <entry>
    <title><![CDATA[myfirst]]></title>
    <url>%2F2019%2F08%2F31%2Fmyfirst%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F08%2F31%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
